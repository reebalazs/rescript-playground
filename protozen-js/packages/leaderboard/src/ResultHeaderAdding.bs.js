// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as EventHelpers$Web from "./EventHelpers.bs.js";
import * as Core from "@material-ui/core";
import * as ValidateHelpers$Web from "./ValidateHelpers.bs.js";
import * as MaterialUi_TextField from "@jsiebern/bs-material-ui/src/MaterialUi_TextField.bs.js";
import Cancel from "@material-ui/icons/Cancel";
import AddCircle from "@material-ui/icons/AddCircle";

function ResultHeaderAdding(Props) {
  var dispatch = Props.dispatch;
  var match = React.useState(function () {
        return "";
      });
  var setName = match[1];
  var name = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setScore = match$1[1];
  var score = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setInvalidName = match$2[1];
  var match$3 = React.useState(function () {
        return ValidateHelpers$Web.validateName(name);
      });
  var setInvalidNameHelper = match$3[1];
  var invalidNameHelper = match$3[0];
  var match$4 = React.useState(function () {
        return ValidateHelpers$Web.validateScore(score);
      });
  var setHintScoreHelper = match$4[1];
  return React.createElement(Core.TableHead, {
              children: React.createElement(Core.TableRow, {
                    children: null
                  }, React.createElement(Core.TableCell, {
                        children: "Add new score:",
                        style: {
                          minWidth: "100px"
                        }
                      }), React.createElement(Core.TableCell, {
                        children: React.createElement(Core.TextField, {
                              error: match$2[0],
                              fullWidth: true,
                              helperText: ValidateHelpers$Web.fixedHelperText(invalidNameHelper),
                              label: "Name",
                              onChange: (function ($$event) {
                                  var value = EventHelpers$Web.onChangeName($$event);
                                  var valueHelper = ValidateHelpers$Web.validateName(value);
                                  Curry._1(setInvalidName, (function (param) {
                                          return valueHelper !== "";
                                        }));
                                  Curry._1(setInvalidNameHelper, (function (param) {
                                          return valueHelper;
                                        }));
                                  return Curry._1(setName, (function (param) {
                                                return value;
                                              }));
                                }),
                              value: MaterialUi_TextField.Value.string(name),
                              variant: "filled"
                            }),
                        padding: "none",
                        style: {
                          width: "100%"
                        }
                      }), React.createElement(Core.TableCell, {
                        children: React.createElement(Core.TextField, {
                              fullWidth: true,
                              helperText: ValidateHelpers$Web.fixedHelperText(match$4[0]),
                              InputProps: {
                                type: "number"
                              },
                              label: "Score",
                              onChange: (function ($$event) {
                                  var value = EventHelpers$Web.onChangeScore($$event);
                                  var valueHelper = ValidateHelpers$Web.validateScore(value);
                                  Curry._1(setHintScoreHelper, (function (param) {
                                          return valueHelper;
                                        }));
                                  return Curry._1(setScore, (function (param) {
                                                return value;
                                              }));
                                }),
                              value: MaterialUi_TextField.Value.string(score === 0 ? "" : String(score)),
                              variant: "filled"
                            }),
                        padding: "none",
                        style: {
                          minWidth: "120px"
                        }
                      }), React.createElement(Core.TableCell, {
                        children: null,
                        style: {
                          minWidth: "100px"
                        }
                      }, React.createElement(Core.IconButton, {
                            onClick: (function (param) {
                                Curry._1(dispatch, {
                                      TAG: /* AddResult */0,
                                      name: name,
                                      score: score
                                    });
                                return Curry._1(dispatch, /* ShowMode */1);
                              }),
                            children: React.createElement(AddCircle, {}),
                            color: "primary",
                            disabled: invalidNameHelper !== ""
                          }), React.createElement(Core.IconButton, {
                            onClick: (function (param) {
                                return Curry._1(dispatch, /* ShowMode */1);
                              }),
                            children: React.createElement(Cancel, {}),
                            color: "secondary"
                          })))
            });
}

var make = ResultHeaderAdding;

export {
  make ,
  
}
/* react Not a pure module */
