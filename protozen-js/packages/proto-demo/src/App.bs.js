// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core from "@material-ui/core";
import * as MaterialUi_TextField from "@jsiebern/bs-material-ui/src/MaterialUi_TextField.bs.js";
import * as Proto$ProtozenService from "@protozen/service/dist/Proto.bs.js";
import * as Connection$ProtozenService from "@protozen/service/src/api/Connection.bs.js";
import AddCircle from "@material-ui/icons/AddCircle";
import ProtoJs from "/Users/ree/work/protozen/rescript-playground/protozen-js/packages/service/dist/proto.js";

function App$app(Props) {
  var match = React.useState(function () {
        return "Oh-oh. You gotta get schwifty.";
      });
  var setMessage = match[1];
  var message = match[0];
  var match$1 = React.useState(function () {
        return /* [] */0;
      });
  var setResults = match$1[1];
  var results = match$1[0];
  var connection = Connection$ProtozenService.createConnection("http://127.0.0.1:8030", undefined, undefined, undefined, ProtoJs, undefined);
  var sendMessage = function (param) {
    Curry._3(Proto$ProtozenService.Services.HelloService.World.make, connection, message, undefined).then(function (param) {
          var world = param.v.world;
          Curry._1(setResults, (function (param) {
                  return {
                          hd: world + " @ " + new Date().toTimeString(),
                          tl: results
                        };
                }));
          return Promise.resolve(undefined);
        });
    
  };
  var resultComponents = Belt_Array.mapWithIndex(Belt_List.toArray(results), (function (index, txt) {
          return React.createElement("div", {
                      key: String(index)
                    }, txt);
        }));
  return React.createElement("div", undefined, React.createElement("div", {
                  className: CssJs.style([
                        CssJs.display("flex"),
                        CssJs.marginBottom(CssJs.px(8))
                      ]),
                  onKeyDown: (function ($$event) {
                      var key = $$event.key;
                      if (key === "Enter") {
                        return sendMessage(undefined);
                      }
                      
                    })
                }, React.createElement(Core.TextField, {
                      className: CssJs.style([
                            CssJs.flexGrow(1.0),
                            CssJs.flexShrink(1.0),
                            CssJs.flex("auto")
                          ]),
                      label: "Message",
                      onChange: (function ($$event) {
                          var value = $$event.currentTarget.value;
                          return Curry._1(setMessage, (function (param) {
                                        return value;
                                      }));
                        }),
                      value: MaterialUi_TextField.Value.string(message),
                      variant: "filled"
                    }), React.createElement(Core.IconButton, {
                      onClick: (function (param) {
                          return sendMessage(undefined);
                        }),
                      children: React.createElement(AddCircle, {}),
                      color: "primary"
                    })), resultComponents);
}

var app = App$app;

export {
  app ,
  
}
/* CssJs Not a pure module */
